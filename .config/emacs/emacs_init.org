#+TITLE: Emacs init configuration
#+AUTHOR: Łukasz Grabiński
#+EMAIL: lgrabinski@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introduction
  My own emacs init.el configuration in org-mode.
* Package source initialization
** package.el
  #+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
         ("org" . "https://orgmode.org/elpa/")
         ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+END_SRC
** straight
   #+BEGIN_SRC emacs-lisp
;;   (defvar bootstrap-version)
;;   (let ((bootstrap-file
;;          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
;;         (bootstrap-version 5))
;;     (unless (file-exists-p bootstrap-file)
;;       (with-current-buffer
;;           (url-retrieve-synchronously
;;            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
;;            'silent 'inhibit-cookies)
;;         (goto-char (point-max))
;;         (eval-print-last-sexp)))
;;     (load bootstrap-file nil 'nomessage))
;;
;;   (setq package-enable-at-startup nil)
;;
;;   (straight-use-package 'use-package)
;;   (setq package-enable-at-startup nil)
;;   (setq straight-use-package-by-default nil)
   #+END_SRC
* UI - User Interface tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)

    (menu-bar-mode -1)

    (setq vivible-bell t)

    ;; font face base on platform type
    (pcase system-type
      ((or 'gnu/linux 'cygwin)
       (set-face-attribute 'default nil :font "Fira Code Retina" :height 60))
      ('windows-nt 
       (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)))

    (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)

    (pcase system-type
      ('gnu/linux
       (load-theme 'xresources t))
      ('windows-nt
       (load-theme 'doom-palenight t)))

    ;;(load-theme 'doom-palenight t)
    ;;(load-theme 'doom-badger t)
    ;;(load-theme 'doom-one t)

    (doom-themes-visual-bell-config))

    ;;(use-package nord-theme)
    ;;(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
    (pcase system-type
    ((or 'gnu/linux 'cygwin)
     (add-to-list 'default-frame-alist '(alpha . 90))))

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      (setq beacon-color "#00ff00"))

    (set-cursor-color "#00ff00")

    (use-package evil-goggles
      :ensure t
      :after
      (evil)
      (evil-collection)
      :config
      (evil-goggles-mode)
      (evil-goggles-use-diff-faces))
  #+END_SRC

** emacs-dashoard 
   #+BEGIN_SRC emacs-lisp

        (use-package page-break-lines
          :ensure t)
    

     ;;   (use-package init-open-recentf
     ;;     :config
     ;;     (recentf-mode 1)
     ;;     (setq recentf-max-menu-items 25)
     ;;     (init-open-recentf))
 
        (use-package dashboard
          :ensure t
          :config
          (setq dashboard-items '((recents . 10)
                                  (bookmarks . 7)
                                  (agenda . 15)
                                  (registers . 7)))
          (setq dashboard-set-heading-icons t)
          (setq dashboard-set-file-icons t)
          (setq dashboard-startup-banner 'logo)
          (setq dashboard-center-content t)
          (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) ;; this is needed to open *dashboar* buffer after startup
          :init
          (dashboard-setup-startup-hook))

   #+END_SRC

** rainbow-mode
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t)
   #+END_SRC

* Incrementatl completion and selection narrowing
** Ivy and Counsel
   #+BEGIN_SRC emacs-lisp
   (use-package ivy 
     :ensure t
     :diminish
     :bind (("C-s" . swiper)
          :map ivy-minibuffer-map
          ("TAB" . ivy-alt-done)
          ("C-l" . ivy-alt-done)
          ("C-j" . ivy-next-line)
          ("C-k" . ivy-previous-line)
          :map ivy-switch-buffer-map
          ("C-k" . ivy-previous-line)
          ("C-l" . ivy-done)
          ("C-d" . ivy-switch-buffer-kill)
          :map ivy-reverse-i-search-map
          ("C-k" . ivy-previous-line)
          ("C-d" . ivy-reverse-i-search-kill))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t))

     (use-package ivy-rich
       :ensure t
       :init
       (ivy-rich-mode 1)
       :after counsel
       :config
       (setq ivy-rich-path-style 'abbred)
       (setq ivy-rich-project-root-cache-mode 1))

     (use-package counsel
       :ensure t
       :bind (("M-b" . counsel-switch-buffer)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history))
       :custom
       (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
       :config
       (counsel-mode 1))

       (use-package all-the-icons-ivy
         :ensure t
         :init
         (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
         :config
         (setq all-the-icons-ivy-buffer-commands '()))
   #+END_SRC

*** Better sorting with prescient.el
    #+BEGIN_SRC emacs-lisp
   (use-package ivy-prescient
      :after counsel
      :custom
      (ivy-prescient-enable-filtering nil)
      :config
      (ivy-prescient-mode 1))
    #+END_SRC
*** ivy-posframe
    #+BEGIN_SRC emacs-lisp
;;      (use-package ivy-posframe
;;        :ensure t
;;        :config
;;          (setq ivy-posframe-display-function-alist
;;                '((swiper . ivy-posframe-display-at-point)
;;                  (complete-symbol . ivy-posframe-display-at-point)
;;                  (counsel-M-x . ivy-posframe-display-at-window-bottom-left)
;;                  (t . ivy-posframe-display)))
;;          (ivy-posframe-mode 1)
;;      )
    #+END_SRC
** Helm 
*** Basic
    #+BEGIN_SRC emacs-lisp
    ;;   (use-package helm
    ;;     :ensure t
    ;;     :bind
    ;;      (("M-x" . helm-M-x)
    ;;       ("C-x C-f" . helm-find-files)
    ;;        :map helm-map
    ;;        ("C-j" . helm-next-line)
    ;;        ("C-k" . helm-previous-line)
    ;;        )
    ;;     :config
    ;;     (helm-mode 1)
    ;;  )
    #+END_SRC
*** helm-swoop
    #+BEGIN_SRC emacs-lisp
    ;;  (use-package helm-swoop
    ;;    :ensure t
    ;;    :config
    ;;  )
    #+END_SRC
*** helm-org-rifle
    #+BEGIN_SRC emacs-lisp
      (use-package helm-org-rifle
        :ensure t
      )
    #+END_SRC
** Deft
   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :ensure t
       :config
       (setq deft-directory "~/work")
       (setq deft-recursive t)
       (setq deft-extensions '("org" "md"))
     )
   #+END_SRC
** Vertico and Consult
*** Vertico
    #+BEGIN_SRC emacs-lisp
;;    (use-package vertico
;;      :init
;;        (vertico-mode))
    #+END_SRC
*** Consult
    #+BEGIN_SRC emacs-lisp
;;    (use-package consult
;;      :hook (completion-list-mode . consult-preview-at-point-mode)
;;      :init)
    #+END_SRC
* Org-mode 
** Basic
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure nil
       :config
       (setq org-ellipsis " ▼")
       (setq org-hide-emphasis-markers t)
       )
   #+END_SRC
** org-agenda
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-include-diary t)
     (setq org-log-done 'time)
     (setq calendar-mark-holidays-flag t)
     (setq org-agenda-files (apply 'append
      (mapcar
        (lambda (directory)
       (directory-files-recursively
         directory org-agenda-file-regexp))
            '("~/shared/" "~/work"))))
     (setq calendar-latitude 51.107883)
     (setq calendar-longitude 17.038538)
     (setq calendar-location-name "Wrocław")
   #+END_SRC
   
*** org-super-agenda
    #+BEGIN_SRC emacs-lisp
      (use-package org-super-agenda
        :ensure t
        :config
        (org-super-agenda-mode)
        (setq org-agenda-custom-commands
          '(("z" "Super agenda view - work"
             ((agenda "" ((org-agenda-span 'day)
                         (org-super-agenda-groups
                          '((:name "Today"
                                   :time-grid t
                                   :date today
                                   :todo "TODAY"
                                   :scheduled today
                                   :order 1)))))))))
      )
    #+END_SRC
** Better bullets 
   #+BEGIN_SRC emacs-lisp

        ;; org-superstart
        (use-package org-superstar
          :ensure t)
        (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "○" "▷" "⁖"))
        (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

   #+END_SRC
** org-babel
   #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
     (python . t)
     (plantuml . t)
     (ditaa . t)
     (latex . t)
     (asymptote . t)
     ))
   (setq org-confirm-babel-evaluate nil)
   #+END_SRC
** org-download
   #+BEGIN_SRC emacs-lisp
   (use-package org-download
     :ensure t
     :config
     ;; add support for dired
     (add-hook 'dired-mode-hook 'org-download-enable)
   )
   #+END_SRC
** Fonts
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)
   (dolist (face '((org-level-1 . 1.2)
                   (org-level-2 . 1.1)
                   (org-level-3 . 1.05)
                   (org-level-4 . 1.0)
                   (org-level-5 . 1.1)
                   (org-level-6 . 1.1)
                   (org-level-7 . 1.1)
                   (org-level-8 . 1.1))))
   ;;(set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
   ;;(setq set-face-attribute (car face) nil
   ;;                         :font "Cantarell"
   ;;                         :weight 'regular
   ;;                         :height (cdr face)))
   #+END_SRC
** org-capture
   #+BEGIN_SRC emacs-lisp
   ;;(setq org-capture-templates) 
   #+END_SRC
** evil-mode
*** evil
     #+BEGIN_SRC emacs-lisp
       (use-package evil
       :ensure t
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       (setq evil-undo-system 'undo-fu)
       ;; More fine undo configuration for evil undo system
       (setq evil-want-fine-undo t)
       :config
       (evil-mode 1)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

       ;; Use visual line motions even outside of visual-line-mode buffers
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))

       (use-package evil-collection
       :ensure t
       :after evil
       :config
       (evil-collection-init))
    #+END_SRC

*** evil-tutor
    #+BEGIN_SRC emacs-lisp
    (use-package evil-tutor
      :ensure t)
    #+END_SRC
*** undo-tree
    *Note* Need to undo-tree in evi-mode
    Package not use as seems undo-tree is unassing causing errors on windows 10 run
    #+BEGIN_SRC emacs-lisp
     ;; (use-package undo-tree
      ;;  :init
      ;;  (global-undo-tree-mode 1)
     ;; )
    #+END_SRC
*** undo-fu
    #+BEGIN_SRC emacs-lisp
      (use-package undo-fu
        :ensure t
        :config
        ;;(global-undo-tree-mode -1)
        ;;(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
        ;;(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
       )
    #+END_SRC
*** evil-org
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :ensure t
        :after org
        :hook ((org-mode . evil-org-mode)
          (org-agenda-mode . evil-org-mode)
          (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textObjects additional)))))
        :config
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys)
        )
    #+END_SRC
** org-roam
   All majar part of org-roam configuration moved to private section of emacs config not share on github.
   This was done to overcome issue with org-rodam-directory and problems related to usage of .dir-locals.
*** org-roam dependencies
    #+BEGIN_SRC emacs-lisp
      (use-package dash
        :ensure t)
    #+END_SRC
*** org-roam-ui
    Replacement of org-roam-server for org-roam v2
    #+BEGIN_SRC emacs-lisp
;;    (use-package org-roam-ui
;;      :ensure
;;        (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
;;        :after org-roam
;;    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;    ;;         a hookable mode anymore, you're advised to pick something yourself
;;    ;;         if you don't care about startup time, use
;;    ;;  :hook (after-init . org-roam-ui-mode)
;;        :config
;;        (setq org-roam-ui-sync-theme t
;;              org-roam-ui-follow t
;;              org-roam-ui-update-on-save t
;;              org-roam-ui-open-on-start t))
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.config/emacs/private/org-roam-ui")
    ;;(load-library "org-roam-ui")
    #+END_SRC
**** org-roam-ui dependencies
     #+BEGIN_SRC emacs-lisp
     ;;(use-package simple_httpd
     ;;  :ensure t)

     ;;(use-package websocket
     ;;  :ensure t
     #+END_SRC
** org-habit
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org
       (add-to-list 'org-modules 'org-habit t))
     (setq org-habit-show-all-today t)
   #+END_SRC
** org-journal
   #+BEGIN_SRC emacs-lisp
   (use-package org-journal
     :ensure t
   )
   #+END_SRC
** org-alert
   #+BEGIN_SRC emacs-lisp
   (use-package org-alert
     :ensure t
     :config
       (setq alert-default-style 'libnotify)
             org-alert-interval 30)
   #+END_SRC
* Key bindings
** Which-key

   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :init (which-key-mode)
     :diminish which-key-mode
     :config
     (setq which-key-idle-delay 0.2))
   #+END_SRC
** General.el
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-create-definer sy/leader-keys
       :keymaps '(normal insert visual emacs)
       :prefix "SPC"
       :global-prefix "C-SPC")

       (sy/leader-keys
         "SPC" '(counsel-M-x :whick-key "M-x")
         ;;"SPC" '(helm-M-x :whick-key "M-x")
         "a" '(:ignore t :which-key "applications")
         "ad" '(dired :whick-key "dired")
         "ae" '(elfeed :which-key "elfeed")
         "ar" '(ranger :Which-key "ranger")
         ;;"am" '(mu4e :which-key "mu4e")
         ;; Above line moved to emacs_init_priv.org not shared on github
         "t" '(:ignore t :which-key "toggles")
         "tt" '(counsel-load-theme :which-key "choose theme")
         ;;"tt" '(load-theme :whick-key "choose theme")
         "o" '(:ignore t :which-key "org-mode")
         "oa" '(org-agenda :whick-key "org-agenda")
         "oc" '(org-capture :whick-key "capture")
         "or" '(:ignore t :which-key "roam")
         "orf" '(org-roam-node-find :which-key "find node")
         "ori" '(org-roam-node-insert :which-key "insert node")
         ;;"b" '(:ignore t :which-key "buffers")
         "bb" '(counsel-switch-buffer :which-key "switch-buffer")
         ;;"bb" '(helm-buffers-list :which-key "switch-buffer")
         "bn" '(next-buffer :which-key "next buffer")
         "bp" '(previous-buffer :whick-key "previuos-buffer")
         "bd" '(kill-buffer :whick-key "kill-buffer")
         "br" '(counsel-buffer-or-recentf :Which-key "recent")
         "f" '(:ignore t: :which-key "files")
         "ff" '(counsel-find-file :which-key "find")
         ;;"ff" '(helm-find-files :which-key "find")
         "fr" '(counsel-recentf :which-key "recent")
         "g" '(:ignore t: :which-key "magit")
         "gs" '(magit-status :which-key "status")
         "l" '(:ignore t: :which-key "links")
         "ll" '(link-hint-open-link-at-point :which-key "open link")
         "lo" '(link-hint-open-link :which-key "show links")
         "s" '(:ignore t: :which-key "search")
         "ss" '(swiper :whick-key "swiper")
         "sd" '(deft :which-key "deft")
         ;;"ss" '(helm-swoop :whick-key "swoop")
         "w" '(:ignore t :which-key "windows")
         "w/" '(split-window-right :which-key "split-right")
         "wh" '(evil-window-left :which-key "left")
         "wj" '(evil-window-down :which-key "down")
         "wk" '(evil-window-up :which-key "up")
         "wn" '(evil-window-next :which-key "next")
         "wN" '(evin-window-new  :which-key "new")
         "wl" '(evil-window-right :which-key "right")
         "wd" '(evil-window-delete :which-key "delete")))
   #+END_SRC
* Unicode fonts
  #+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup)) 
  #+END_SRC
* Emojis
  #+BEGIN_SRC emacs-lisp
  (use-package emojify
    :commands emojify-mode)
  #+END_SRC
* Presentations
** org-tree-slide
   #+BEGIN_SRC emacs-lisp
   (defun sy/org-start-presentation ()
     (interactive)
     (org-tree-slide-mode 1)
     (setq text-scale-mode-amount 4)
     (test-scale 1))
     
   (defun sy/org-end-presentation ()
     (interactive)
     (text-scale-mode 0)
     (org-tree-slide-mode 0))

   (use-package org-tree-slide
     :defer t
     :after org
     :commands org-tree-slide-mode
     :config
     (evil-define-key 'normal org-tree-slide-mode-map
       (kbd "C-j") 'org-tree-slide-move-next-tree
       (kbd "C-k") 'org-tree-slide-move-previous-tree
       (kbd "q") 'sy/org-end-presentation)
     (setq org-tree-slide-header t))
   #+END_SRC
** Reveal.js
   #+BEGIN_SRC emacs-lisp
     (use-package org-re-reveal
       :ensure t
       :config
       (setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
             org-re-reveal-revealjs-version "4"))
   #+END_SRC
* Applications
** Elfeed
   Configuration created based on: [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/]]
   #+BEGIN_SRC emacs-lisp
   (use-package elfeed-org
     :ensure t
     :config
     (elfeed-org)
     (setq rmh-elfeed-org-files
       (list "~/shared/elfeed/elfeed.org")))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :ensure t
       :config
       (setq elfeed-db-directory "~/shared/elfeed/elfeeddb")
       (setq-default elfeed-search-filter "@6-months-ago "))
   #+END_SRC
*** elfeed-dashboard
    Based on elfeed-dashboard github description: [[https://github.com/Monoj321/elfeed-dashboard]]
    #+BEGIN_SRC emacs-lisp
    (use-package elfeed-dashboard
      :ensure t
      :config
      (setq elfeed-dashboard-file "~/shared/elfeed/elfeed-dashboard.org")
      ;; update feed counts on elfeed-quit
      (advice-add 'efleed-search-quit-window :after #'elfeed-dashboard-update-links))
    #+END_SRC
*** elfeed-goodies
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed-goodies
      :ensure t
      :init
      (elfeed-goodies/setup)
      :config
      (setq elfeed-goodies/entry-pane-position 'bottom)
      (setq elfeed-goodies/feed-source-column-width 35)
      )
    #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
   (use-package dired
     :ensure nil)
    
   (use-package dired-single)

   (use-package all-the-icons-dired
     :hook (dired-mode . all-the-icons-dired-mode))
   #+END_SRC
** Ranger
   #+BEGIN_SRC emacs-lisp
     (use-package ranger
       :ensure t)
   #+END_SRC
** mu4e - emails
   Configuration moved to private part of may configuration: emacs_init_priv.org not shared on github.
*** mu4e-alert
    #+BEGIN_SRC emacs-lisp
      (use-package mu4e-alert
        :ensure t
        :hook
          (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
        :config
          (setq mu4e-alert-set-default-style 'libnotify
                mu4e-alert-email-notification-types '(count))
      )
    #+END_SRC
* Editing
** Tab width
   #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 2)
   (setq-default evil-shift-with tab-width)
   #+END_SRC
** Use spaces
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC
* Scrolling and browsing
  #+BEGIN_SRC emacs-lisp
  (use-package link-hint
    :ensure t)
  #+END_SRC
* Checks and completition
** Flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :init
     (global-flycheck-mode))
   #+END_SRC
** Auto-complete
   #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
     :ensure t
     :init
     (progn
     (ac-config-default)
     (global-auto-complete-mode t))
   )
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
   (use-package org-ac
     :config
     (org-ac/config-default))
   #+END_SRC
* Development
** Rust
   #+BEGIN_SRC emacs-lisp
   (use-package rust-mode
     :ensure t
     :config
     (setq rust-format-on-save t)
     (setq indent-tabs-mode nil)
     )
   #+END_SRC
** Python
** Magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit
      :ensure t)
   #+END_SRC
** Yang
*** yang-mode
    #+BEGIN_SRC emacs-lisp
    (use-package yang-mode
      :ensure t)
    #+END_SRC
* Documentation
** rf-mode
   #+BEGIN_SRC emacs-lisp
     (use-package rfc-mode
       :ensure t
       :config
         (setq rfc-mode-directory (expand-file-name "~/rfc/"))
     )
   #+END_SRC
* Tweaks for Windows OS
** Java -jar apps paths
   #+BEGIN_SRC emacs-lisp
  (pcase system-type
  ('windows-nt 
  (setq org-plantuml-jar-path
      (expand-file-name "c:/programs/plantuml.jar"))
  (setq org-ditaa-jar-path
      (expand-file-name "c:/programs/ditaa0_9.jar"))
  ))
#+END_SRC
* Others

  #+BEGIN_SRC emacs-lisp
  (use-package command-log-mode)

  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 22
          doom-modeline-minor-modes nil)
  )
        
  ;;(use-package spaceline
  ;;  :ensure t
  ;;  :config
  ;;  (spaceline-spacemacs-theme))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;;(use-package ox-reveal
  ;;	:ensure t)
  ;;(require 'ox-reveal)

  (add-hook 'emacs-startup-hook
    (lambda ()
      (message "Emacs ready in %s with %d garbage collections."
        (format "%.2f seconds"
          (float-time
            (time-subtract after-init-time before-init-time)))
                           gcs-done)))


  ;; Make startup faster by reducing the frequency of garbage
  ;; collection.  The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; The rest of the init file.

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
  #+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package xresources-theme
  :ensure t)
#+END_SRC
* Additional config
** Private
   #+BEGIN_SRC emacs-lisp
   (let ((init_priv "~/shared/init_priv.el"))
        (when (file-exists-p init_priv)
              (load-file init_priv)))
   #+END_SRC
** Work
   #+BEGIN_SRC emacs-lisp
   (let ((init_work "~/work/init_work.el"))
        (when (file-exists-p init_work)
              (load-file init_work)))
   #+END_SRC
