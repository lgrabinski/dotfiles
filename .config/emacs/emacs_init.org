* Packages source initialization
** straight.el
   Straight.el moved to init.el due to org-mode version initialization sequence etc.
* Default coding system
  #+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
  #+END_SRC
* UI - User Interface tweaks
** Themes
  #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t
    :config
   (setq doom-themes-enable-bold t
         doom-enable-italic t))

   (load-theme 'doom-one t)
#+END_SRC
** Emacs core based
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (setq visible-bell t)

  ;; font face base on platform type
  (pcase system-type
   ((or 'gnu/linux 'cygwin)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 85))
   ('windows-nt
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)))

  (setq recentf-mode t)
#+END_SRC

** Emacs external packages based
*** doom-modeline package
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** emacs-dashboard packge
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
   :straight t
 ;;  :init
 ;;  (dashboard-setup-startup-hook)
   )
#+END_SRC
** Icons
*** All the icons
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :straight t
   )
   #+END_SRC
*** All the icons completion
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons-completion
       :straight t
       :after (marginalia all-the-icons)
       :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
       :init
       (all-the-icons-completion-mode))
   #+END_SRC
** Unicode fonts
  #+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :straight t
    :config
    (unicode-fonts-setup))
  #+END_SRC
* Evil-mode related
** evil package  
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1))
#+END_SRC
* evil-collection pacakge
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

* Incremental completion, searching, selecting and narrowing
** vertico package
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode)
    :bind (:map vertico-map
    ("C-j" . vertico-next)
    ("C-k" . vertico-previous)
    ("C-f" . vertico-exit)))
#+END_SRC
** Orderless
  #+BEGIN_SRC emacs-lisp
    (use-package orderless
      :straight t
      :init
      (setq completion-styles '(orderless basic)
    	completion-category-defaults nil
    	comletion-category-overrides '((file (styles partial-completion)))))
  #+END_SRC
** marginalia package
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
#+END_SRC

** consult pacakge
#+BEGIN_SRC emacs-lisp
  (use-package consult
   :straight t
   :hook
   (completion-list-mode . consult-preview-at-point-mode)
   :init)
#+END_SRC

** corfu package
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :straight t
    :init
    (global-corfu-mode)
    :config
    (setq corfu-auto t
  	corfu-quit-no-match 'separator)) ;; or t
#+END_SRC
 
* Org-mode
** org-mode package
   use-package and init in init.el
** org-babel config
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
       '((emacs-lisp . t)
   ))
   (setq org-confirm-babel-evaluate nil)
#+END_SRC
** org-superstar
  #+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :straight t
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "○" "▷" "⁖"))
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
  #+END_SRC
** org-roam
  #+BEGIN_SRC emacs-lisp
    (use-package org-roam
      :straight t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/pkm/content-org")
      (org-roam-completion-everywhere t)
      (org-roam-capture-templates
      '(("d" "default" plain
         "%?"
         :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
         :unnarrowed t)))
      :init
      (setq org-roam-v2-ack t)
      :config
      (org-roam-setup))
  #+END_SRC
* Key bindings
** which-key package
#+BEGIN_SRC emacs-lisp
  (use-package which-key
   :straight t
   :init
   (which-key-mode)
   :diminish
   which-key-mode
   :config
   (setq which-key-idle-delay 0.2))
#+END_SRC

** general.el package
#+BEGIN_SRC emacs-lisp
  (use-package general
   :straight t
   :config
   (general-create-definer lg/leader-keys
   :keymaps '(normal insert visual emacs)
   :prefix "SPC"
   :global-prefix "C-SPC")

   (lg/leader-keys
     "SPC" '(execute-extended-command :whick-key "M-x")
     "a" '(:ignore t :which-key "applications")
     "ad" '(dired :which-key "dired")
     "ae" '(elfeed :which-key "elfeed")
     "at" '(treemacs :which-key "treemacs")
     "b" '(:ignore t :which-key "buffers")
     "bb" '(consult-buffer :which-key "switch-buffers")
     "f" '(:ignore t :which-key "files")
     "ff" '(consult-find :wich-key "find")
     "fr" '(consult-recent-file :which-key "recent")
     "o" '(:ignore t :which-key "org-mode")
     "or" '(:ignore t :which-key "roam")
     "orf" '(org-roam-node-find :which-key "find node")
     "ori" '(org-roam-node-insert :which-key "insert node")
     "s" '(:ignore t :which-key "search")
     "sg" '(consult-ripgrep :which-key "ripgrep")
     "sh" '(consult-org-heading :which-key "org-heading")
     "sr" '(consult-ripgrep "ripgrep")
     "ss" '(consult-line :which-key "lines")
     "w" '(:ignore t :which-key "windows")
     "w/" '(splt-window-right :which-key "split-right")
     "wh" '(evil-window-left :which-key "left")
     "wj" '(evil-window-down :which-key "down")
     "wk" '(evil-window-up :which-key "up")
     "wn" '(evil-window-next :which-key "next")
     "wN" '(evil-window-new :which-key "new")
     "wl" '(evil-window-right :which-key "right")
     "wd" '(evil-window-delete "which-key" "delete")
   ))
#+END_SRC

* Applications
** treemacs package
  #+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :straight t
  )
  #+END_SRC
** Elfeed
  #+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :straight t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files
  	(list "~/shared/elfeed/elfeed.org")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :straight t 
      :config
      (setq elfeed-db-directory "~/shared/elfeeddb")
      (setq-default elfeed-search-filter "@6-months-ago ")
      )
  #+END_SRC
*** Elfeed-dashboard
   Based on elfeed-dashboard github description: https://github.com/Monoj321/elfeed-dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed-dashboard
       :straight t
       :config
       (setq elfeed-dashboard-file "~/shared/elfeed/elfeed-dashboard.org")
       ;; update feed counts on elfeed-quit
       (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))
   #+END_SRC
