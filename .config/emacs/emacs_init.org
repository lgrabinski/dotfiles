* Packages source initialization
** straight.el
   Straight.el moved to init.el due to org-mode version initialization sequence etc.
* Default coding system
  #+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
  #+END_SRC
* Emacs core based
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)
    (menu-bar-mode -1)

    (setq visible-bell t)

    ;; font face base on platform type
    (pcase system-type
     ((or 'gnu/linux 'cygwin)
      ;;(set-face-attribute 'default nil :font "Fira Code Retina" :height 85)
      ;;(set-face-attribute 'default nil :font "IosevkaTerm Nerd Font" :height 80 :weight 'medium)
      ;;(set-face-attribute 'default nil :font "Iosevka Nerd Font Mono" :height 85 :weight 'normal)
      (set-face-attribute 'default nil :font "Hack Nerd Font" :height 90 :weight 'normal)
      )
     ('windows-nt
      ;;(set-face-attribute 'default nil :font "Fira Code Retina" :height 100)
      (set-face-attribute 'default nil :font "Hack Nerd Font" :height 110 :weight 'semibold)
      ))

    (setq recentf-mode t)
    (set-cursor-color "#ff0000")

    ;; Below taken from https://www.emacswiki.org/emacs/BackupDirectory
    (setq backup-by-copying t ; don't clobber symlinks
          backup-directory-alist '(("." . "~/.saves/")) ; don't litter my fs tree
          delete-old-versions t
          kept-new-versions 6
          kept-old-version 2
          version-control t) ; use versioned backups

#+END_SRC
** Emacs as external editor
*** GhostText
**** atomic-chrome
    #+BEGIN_SRC emacs-lisp
    (use-package atomic-chrome
      :straight t
      :init
      (atomic-chrome-start-server))
    #+END_SRC
* UI - User Interface tweaks
** Themes
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :straight t
      :config
     (setq doom-themes-enable-bold t
           doom-enable-italic t))

     ;;(load-theme 'doom-one t)
    (load-theme 'doom-rouge t)
#+END_SRC
** Emacs external packages based
*** doom-modeline package
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode))
#+END_SRC
*** beacon
    #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :straight t
      :config
      (beacon-mode 1)
      (setq beacon-color "#ff0000")
      (set-cursor-color "#ff0000")) ;; needed again after beacon color set
    #+END_SRC
** emacs-dashboard package
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :straight t
      :config
      (setq dashboard-items '((recents . 10)
    			  (bookmarks . 7)
    			  (agenda . 15)
    			  (registers . 7)))
      (setq dashboard-set-headings-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-center-content t)
      (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) ;; this is needed to open *dashboard* buffer after startup
      :init
      (dashboard-setup-startup-hook)
     )
   #+END_SRC
** Icons
*** All the icons
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :straight t
   )
   #+END_SRC
*** All the icons completion
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons-completion
       :straight t
       :after (marginalia all-the-icons)
       :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
       :init
       (all-the-icons-completion-mode))
   #+END_SRC
*** Nerd icons
    #+BEGIN_SRC emacs-lisp
    (use-package nerd-icons
      :straight t)
    #+END_SRC
** Unicode fonts
  #+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :straight t
    :config
    (unicode-fonts-setup))
  #+END_SRC
** Emoji
*** Emojify
   #+BEGIN_SRC emacs-lisp
   (use-package emojify
     :straight t
     :commands emojify-mode)
   #+END_SRC
** org-modern
  #+BEGIN_SRC emacs-lisp
    (use-package org-modern
      :straight t)
  #+END_SRC
* Evil-mode related
** evil package  
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-fu)
    ;; More fine tuned undo configuration for evil undo system
    (setq evil-want-fine-undo t)
    :config
    (evil-mode 1))
#+END_SRC
** evil-collection package
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))
#+END_SRC
** undo-fu
  #+BEGIN_SRC emacs-lisp
    (use-package undo-fu
      :straight t)
  #+END_SRC
* Incremental completion, searching, selecting and narrowing
** vertico package
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode)
    :bind (:map vertico-map
    ("C-j" . vertico-next)
    ("C-k" . vertico-previous)
    ("C-f" . vertico-exit)))
#+END_SRC
** Orderless package
  #+BEGIN_SRC emacs-lisp
    (use-package orderless
      :straight t
      :init
      (setq completion-styles '(orderless basic)
    	completion-category-defaults nil
    	comletion-category-overrides '((file (styles partial-completion)))))
  #+END_SRC
** marginalia package
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
#+END_SRC

** consult pacakge
#+BEGIN_SRC emacs-lisp
  (use-package consult
   :straight t
   :hook
   (completion-list-mode . consult-preview-at-point-mode)
   :init)
#+END_SRC

** corfu package
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :straight t
    :init
    (global-corfu-mode)
    :config
    (setq corfu-auto t
  	corfu-quit-no-match 'separator)) ;; or t
#+END_SRC
 
** embark package
   #+BEGIN_SRC emacs-lisp
     (use-package embark
       :straight t
       :bind
       (("C-." . embark-act)
        ("C-;" . embark-dwim)
        ("C-h B" . embark-bindings))
     )
   #+END_SRC
* Org-mode
** org-mode package
   use-package and init in init.el
   #+BEGIN_SRC emacs-lisp
   (setq org-log-done 'time)
   #+END_SRC
*** org-agenda
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-include-diary t)
   (setq calendar-mark-holidays-flat t)
   (setq org-agenda-files (apply 'append
     (mapcar
       (lambda (directory)
         (directory-files-recursively
          directory org-agenda-file-regexp))
          '("~/shared/"))))
   #+END_SRC
*** org-mode task related
    Inspiration source: [[https://lucidmanager.org/productivity/getting-things-done-with-emacs/]]
   #+BEGIN_SRC emacs-lisp
     (setq-default org-todo-keywords
     	      '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

   #+END_SRC
** org-babel config
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (plantuml . t)
         (ditaa . t)
         (latex . t)
         ;;(rust . t)
         (dot . t)
   ))
   (setq org-confirm-babel-evaluate nil)
#+END_SRC
** org-superstar
  #+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :straight t
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "○" "▷" "⁖"))
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
  #+END_SRC
** org-roam
  #+BEGIN_SRC emacs-lisp
    (use-package org-roam
      :straight t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/pkm/content-org")
      (org-roam-completion-everywhere t)
      (org-roam-capture-templates
      '(("d" "default" plain
         "%?"
         :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
         :unnarrowed t)))
      :init
      (setq org-roam-v2-ack t)
      :config
      (org-roam-setup))
  #+END_SRC
** org-roam-ui
  #+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :straight t
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save nil
          org-roam-open-on-start nil))
  #+END_SRC
** org-sidebar
  #+BEGIN_SRC emacs-lisp
  (use-package org-sidebar
    :straight t)
  #+END_SRC
** org-download
  #+BEGIN_SRC emacs-lisp
    (use-package org-download
      :straight t
      :init
      (add-hook 'dired-mode-hook 'org-download-enable))
  #+END_SRC
** export settings
   #+BEGIN_SRC emacs-lisp
     (setq
           org-export-with-sub-superscripts nil
           org-export-with-toc t)
   #+END_SRC
*** HTML specific
   #+BEGIN_SRC emacs-lisp
   ()
   #+END_SRC
* Key bindings
** which-key package
#+BEGIN_SRC emacs-lisp
  (use-package which-key
   :straight t
   :init
   (which-key-mode)
   :diminish
   which-key-mode
   :config
   (setq which-key-idle-delay 0.2))
#+END_SRC

** general.el package
#+BEGIN_SRC emacs-lisp
  (use-package general
   :straight t
   :config
   (general-create-definer lg/leader-keys
   :keymaps '(normal insert visual emacs)
   :prefix "SPC"
   :global-prefix "C-SPC")

   (lg/leader-keys
     "SPC" '(execute-extended-command :whick-key "M-x")
     "a" '(:ignore t :which-key "applications")
     "ad" '(dired :which-key "dired")
     "ae" '(elfeed :which-key "elfeed")
     "at" '(treemacs :which-key "treemacs")
     "b" '(:ignore t :which-key "buffers")
     "bb" '(consult-buffer :which-key "switch-buffers")
     "bn" '(next-buffer :which-key "next-buffer")
     "bd" '(kill-buffer :which-key "kill-buffer")
     "bp" '(previous-buffer :which-key "previous-buffer")
     "f" '(:ignore t :which-key "files")
     "ff" '(consult-find :wich-key "find")
     "fr" '(consult-recent-file :which-key "recent")
     "g" '(:ignore t :which-key "magit")
     "gs" '(magit-status :which-key "status")
     "o" '(:ignore t :which-key "org-mode")
     "oa" '(org-agenda :which-key "agenda")
     "or" '(:ignore t :which-key "roam")
     "orf" '(org-roam-node-find :which-key "find node")
     "ori" '(org-roam-node-insert :which-key "insert node")
     "s" '(:ignore t :which-key "search")
     "sg" '(consult-ripgrep :which-key "ripgrep")
     "sh" '(consult-org-heading :which-key "org-heading")
     "sr" '(consult-ripgrep :which-key "ripgrep")
     "ss" '(consult-line :which-key "lines")
     "t" '(:ignore t :which-key "toggles/UI")
     "tt" '(consult-theme :which-key "choose theme")
     "w" '(:ignore t :which-key "windows")
     "w/" '(split-window-right :which-key "split-right")
     "wh" '(evil-window-left :which-key "left")
     "wj" '(evil-window-down :which-key "down")
     "wk" '(evil-window-up :which-key "up")
     "wn" '(evil-window-next :which-key "next")
     "wN" '(evil-window-new :which-key "new")
     "wl" '(evil-window-right :which-key "right")
     "wd" '(evil-window-delete :which-key "delete")
   ))
#+END_SRC

* Applications
** treemacs package
  #+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :straight t
  )
  #+END_SRC
** Elfeed
  #+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :straight t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files
  	(list "~/shared/elfeed/elfeed.org")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :straight t 
      :config
      (setq elfeed-db-directory "~/shared/elfeeddb")
      (setq-default elfeed-search-filter "@6-months-ago ")
      )
  #+END_SRC
*** Elfeed-dashboard
   Based on elfeed-dashboard github description: https://github.com/Monoj321/elfeed-dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed-dashboard
       :straight t
       :config
       (setq elfeed-dashboard-file "~/shared/elfeed/elfeed-dashboard.org")
       ;; update feed counts on elfeed-quit
       (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))
   #+END_SRC
** Dired
  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :straight nil)
    (use-package dired-single
      :straight t)
    (use-package all-the-icons-dired
      :straight t
      :hook (dired-mode . all-the-icons-dired-mode))
  #+END_SRC
*** Peep-dired
    #+BEGIN_SRC emacs-lisp
    (use-package peep-dired
      :straight t)
    #+END_SRC
* Development
** Magit 
  #+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t)
  #+END_SRC
** Yang
*** yang-mode
   #+BEGIN_SRC emacs-lisp
   (use-package yang-mode
     :straight t)
   #+END_SRC
** YASnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :config
    (setq yas-snippet-dirs '("~/shared/snippets/"
                             "~/work/snippets/"))
    (yas-global-mode 1))
  #+END_SRC
** Rust
  #+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :straight t
    :config
    (setq rust-format-on-save t)
    (setq indent-tabs-mode nil))
  #+END_SRC
*** ob-rust
   #+BEGIN_SRC emacs-lisp
   (use-package ob-rust
     :straight t
     :after (org-mode)
   )
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (use-package lua-mode
       :straight t)
   #+END_SRC
** LSP - Language Server Protocol
**** lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :straight t
       :init
       (setq lsp-auto-guess-root nil)
       :hook
       (rust-mode . lsp)
       (yang-mode . lsp)
       (lsp-mode . lsp-enable-which-key-integration)
       :commands lsp)
   #+END_SRC
**** lsp-ui
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-ui
      :straight t
    )
    #+END_SRC
* Presentation
** org-re-reveal
  #+BEGIN_SRC emacs-lisp
  (use-package org-re-reveal
    :straight t)
  #+END_SRC
** org-tree-slide
#+BEGIN_SRC emacs-lisp
  (defun lg/presentation-start ()
    (beacon-mode 0)
    (message "debug")
    (setq text-scale-mode-amount 3)
    (setq org-display-inline-images t)
    (text-scale-mode 1))

    (defun lg/presentation-stop ()
      (becon-mode 1)
      (test-scale-mode 0)
      (setq org-display-inline-images nil))

  (use-package org-tree-slide
    :straight t
    :hook (
  	 (org-tree-slide-mode . lg/presentation-start)
  	 (org-tree-slide--stop . lg/presentation-stop)
    )
    :after org
    :config
    (setq org-tree-slide-breadcrumbs " >> ")
    (setq org-tree-slide-activate-message "Presentation started")
    (setq org-tree-slide-deactivate-message "Presentation ended")
    (setq org-tree-slide-header t)
    )
#+END_SRC
* Tweaks for Windows OS 
  #+BEGIN_SRC emacs-lisp
  (pcase system-type
    ('windows-nt
     (setq org-plantuml-jar-path
   	 (expand-file-name "c:/programs/plantuml.jar"))
      (setq org-ditaa-jar-path
   	 (expand-file-name "c:/programs/ditaa0_9.jar"))
     ))
  #+END_SRC

* Additional config
** Private
  #+BEGIN_SRC emacs-lisp
    (let ((init_priv "~/shared/emacs/init_priv.el"))
      (when (file-exists-p init_priv)
        (load-file init_priv)))
  #+END_SRC
** Work
  #+BEGIN_SRC emacs-lisp
    (let ((init_work "~/work/init_work.el"))
      (when (file-exists-p init_work)
        (load-file init_work)))
  #+END_SRC
  
