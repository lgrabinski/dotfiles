* Packages source initialization
** straight.el
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)

  (defvar bootstrap-version)
  (let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
   
  (setq straight-use-package-by-default t)
#+END_SRC
* UI - User Interface tweaks
** Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t
    :config
   (setq doom-themes-enable-bold t
         doom-enable-italic t))

   (load-theme 'doom-one t)
#+END_SRC
** Emacs core based
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (setq visible-bell t)

  ;; font face base on platform type
  (pcase system-type
   ((or 'gnu/linux 'cygwin)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 85))
   ('windows-nt
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)))
#+END_SRC

** Emacs external packages based
*** doom-modeline package
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** emacs-dashboard packge
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
   :straight t
 ;;  :init
 ;;  (dashboard-setup-startup-hook)
   )
#+END_SRC

* Evil-mode related
** evil package  
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1))
#+END_SRC
* evil-collection pacakge
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

* Incremental completion, searching, selecting and narrowing
** vertico package
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode)
    :bind (:map vertico-map
    ("C-j" . vertico-next)
    ("C-k" . vertico-previous)
    ("C-f" . vertico-exit)))
#+END_SRC
** marginalia package
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
#+END_SRC

** consult pacakge
#+BEGIN_SRC emacs-lisp
  (use-package consult
   :straight t
   :hook
   (completion-list-mode . consult-preview-at-point-mode)
   :init)
#+END_SRC

** corfu package
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :straight t
    :init
    (global-corfu-mode))
#+END_SRC
 
* Org-mode
** org-mode package
#+BEGIN_SRC emacs-lisp
  (use-package org
   :straight t
   :config
   (setq org-elipsis " â¬Ž")
   (setq org-hide-emphasis-markers t))
#+END_SRC

** org-babel config
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
       '((emacs-lisp . t)
   ))
   (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Key bindings
** which-key package
#+BEGIN_SRC emacs-lisp
  (use-package which-key
   :straight t
   :init
   (which-key-mode)
   :diminish
   which-key-mode
   :config
   (setq which-key-idle-delay 0.2))
#+END_SRC

** general.el package
#+BEGIN_SRC emacs-lisp
  (use-package general
   :straight t
   :config
   (general-create-definer lg/leader-keys
   :keymaps '(normal insert visual emacs)
   :prefix "SPC"
   :global-prefix "C-SPC")

   (lg/leader-keys
     "a" '(:ignore t :which-key "applications")
     "ad" '(dired :which-key "dired")
     "b" '(:ignore t :which-key "buffers")
     "bb" '(consult-buffer :which-key "switch-buffers")
     "o" '(:ignode t :which-key "org-mode")
   ))
#+END_SRC

* Applications
** treemacs package
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :straight t
  )
#+END_SRC
